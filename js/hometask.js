/*
1) Напишите функцию showExperience, которая будет принимать в себя объект со всеми данными и возвращать строку с опытом.
Пример: showExperience(personalPlanPeter) => '1 month'
P.S. желательно использовать деструктуризацию, но не обязательно
2)Напишите функцию showProgrammingLangs, которая будет принимать в себя объект со всеми данными и возвращать строку в нужном виде
Пример: showProgrammingLangs(personalPlanPeter)  =>"Язык js изучен на 20% Язык php изучен на 10%"
Причем функция должна работать вне зависимости от количества языков. Если ни один не указан, то возвращается пустая строка.
P.S. Для переноса строки используется \n в конце строки.

3) Создайте метод showAgeAndLangs внутри объекта personalPlanPeter. При его вызове метод будет принимать в себя объект и возвращать строку в нужном виде.
Пример: personalPlanPeter.showAgeAndLangs(personalPlanPeter) => 'Мне 29 и я владею языками: RU ENG'
Заметьте, что возраст и языки подставляются автоматически из объекта, а языки всегда в верхнем регистре (большими буквами). Если данные в объекте поменяются, то и сообщение тоже изменится. 
*/
const personalPlanPeter = {
    name: "Peter", // Имя
    age: "29", // Возраст
    skills: { // Навыки
        languages: ['ru', 'eng'], // Языки
        programmingLangs: { // Программирование
            js: '20%', // JavaScript
            php: '10%' // PHP
        },
        exp: '1 month' // Опыт
    },
    showAgeAndLangs: function(plan) { // Функция для отображения возраста и языков
        const {age} = plan; // Деструктуризация для получения возраста из плана
        const {languages} = plan.skills; // Деструктуризация для получения списка языков из плана
        let str = `Мне ${age} и я владею языками: `; // Формирование строки с информацией о возрасте

        languages.forEach(function(lang) { // Итерация по списку языков
            str += `${lang.toUpperCase()} `; // Добавление каждого языка в верхнем регистре к строке
        });

        return str; // Возврат строки
    }
};

personalPlanPeter.showAgeAndLangs(personalPlanPeter); // Вызов функции для отображения возраста и языков, передача объекта персонального плана

function showExperience(plan) { // Функция для отображения опыта
    const {exp} = plan.skills; // Деструктуризация для получения опыта из плана
    return exp; // Возврат опыта
}

showExperience(personalPlanPeter); // Вызов функции для отображения опыта, передача объекта персонального плана

function showProgrammingLangs(plan) { // Функция для отображения изученных языков программирования
    let str = ''; // Пустая строка для формирования вывода
    const {programmingLangs} = plan.skills; // Деструктуризация для получения списка изученных языков программирования из плана
    for (let key in programmingLangs) { // Итерация по ключам объекта с языками программирования
        str += `Язык ${key} изучен на ${programmingLangs[key]}\n`; // Формирование строки с информацией об изученных языках программирования
    }

    return str; // Возврат строки
}

showProgrammingLangs(personalPlanPeter); // Вызов функции для отображения изученных языков программирования, передача объекта персонального плана

/* задание 2
1) Напишите функцию showFamily, которая будет принимать в себя массив строк и возвращать сообщение в нужном формате.
showFamily(family)  => 'Семья состоит из: Peter Ann Alex Linda'
Имена подставляются автоматически из массива. Если массив пустой, то выводится сообщение 'Семья пуста'
2) напишите функцию standardizeStrings, которая будет принимать в себя массив строк и будет выводить в консоль эти строки в нижнем регистре.
Пример:standardizeStrings(favoriteCities)  выведет в консоль
lisbon
rome
milan
dublin 
*/
// 1) Функция showFamily
function showFamily(arr) {
    if (arr.length === 0) { // Если массив пустой
        return 'Семья пуста';
    } else {
        const familyString = arr.join(' '); // Объединяем элементы массива в одну строку с пробелами между ними
        return `Семья состоит из: ${familyString}`; // Возвращаем сообщение с объединенной строкой
    }
}

// Пример использования:
const family = ['Peter', 'Ann', 'Alex', 'Linda'];
console.log(showFamily(family)); // Выведет: 'Семья состоит из: Peter Ann Alex Linda'

// 2) Функция standardizeStrings
function standardizeStrings(arr) {
    arr.forEach(city => console.log(city.toLowerCase())); // Выводим каждый элемент массива в нижнем регистре
}

// Пример использования:
const favoriteCities = ['liSBon', 'ROME', 'miLan', 'Dublin'];
standardizeStrings(favoriteCities);
// Выведет:
// lisbon
// rome
// milan
// dublin
/*
3) Напишите функцию reverse, которая принимает в себя строку и возвращает эту строку в обратном порядке.
Пример: const someString = 'This is some strange string';
reverse(someString) => 'gnirts egnarts emos si sihT'
Функцию можно применить к любой строке. Если в функцию приходит не строка - вернуть сообщение "Ошибка!"
*/

const someString = 'This is some strange string'; // Определение переменной someString со значением строки
function reverse(str) { // Объявление функции reverse, которая принимает один аргумент str
    if (typeof str !== 'string') { // Проверка, если тип аргумента str не является строкой
        return "Ошибка!"; // Возврат строки "Ошибка!"
    }
    return str.split('').reverse().join(''); // Разбиваем строку на массив символов, переворачиваем массив и объединяем символы обратно в строку, затем возвращаем результат
}

// Пример использования:
const reversedString = reverse(someString); // Вызов функции reverse с аргументом someString и присвоение результата переменной reversedString
console.log(reversedString); // Вывод результата работы функции reverse в консоль

/*
4)Представьте такую реальную ситуацию. У вас есть банкомат, который выдает деньги из двух разных банков в разных валютах. Один банк основной с базовыми валютами, второй дополнительный с прочими валютами:
const baseCurrencies = ['USD', 'EUR'];
const additionalCurrencies = ['UAH', 'RUB', 'CNY'];
Вам нужно создать главную функцию банкомата availableCurr, которая принимает два аргумента: первый - это массив со всеми доступными валютами из двух банков сразу (сейчас представим, что они не могут повторяться), второй - необязательный аргумент, который указывает ту валюту, которая сейчас закончилась в банкомате. Если массив в первом аргументе пустой - то функция возвращает строку 'Нет доступных валют'. Функция возвращает строку в нужном виде.
Пример:
availableCurr(['UAH', 'RUB', 'CNY'], 'CNY')
Вернет строку:
Доступные валюты:
UAH
RUB
Заметьте:
- CNY (юань) исчез из списка валют, значит такая валюта закончилась
- После валюты: стоит перенос строки \n, и после каждой валюты тоже. Это важно для тестов
- Данные для первого аргумента должны приходить сразу из двух банков, причем сначала baseCurrencies, потом additionalCurrencies по порядку 
*/
const baseCurrencies = ['USD', 'EUR'];
const additionalCurrencies = ['UAH', 'RUB', 'CNY'];

function availableCurr(arr, missingCurr) {
    if (arr.length === 0) { // Проверка на пустой массив
        return 'Нет доступных валют';
    }
    let result = 'Доступные валюты:\n'; // Начальная строка с информацией о доступных валютах
    arr.forEach(currency => { // Итерация по каждой валюте из общего списка
        if (currency !== missingCurr) { // Проверка, если текущая валюта не равна закончившейся
            result += currency + '\n'; // Добавление текущей валюты к результату с переносом строки
        }
    });
    return result; // Возврат строки с доступными валютами
}
// Пример использования:
console.log(availableCurr([...baseCurrencies, ...additionalCurrencies], 'CNY'));